<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/focus_ai/presentation/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/focus_ai/presentation/MainActivity.kt" />
              <option name="originalContent" value="package com.example.focus_ai.presentation&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.core.splashscreen.SplashScreen.Companion.installSplashScreen&#10;import com.example.focus_ai.presentation.model.FocusSessionState&#10;import com.example.focus_ai.presentation.ui.MainScreen&#10;import kotlinx.coroutines.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.platform.LocalContext&#10;&#10;class MainActivity : ComponentActivity() {&#10;&#10;    private var timerJob: Job? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        installSplashScreen()&#10;        super.onCreate(savedInstanceState)&#10;&#10;        setTheme(android.R.style.Theme_DeviceDefault)&#10;&#10;        setContent {&#10;            val sessionState = remember { mutableStateOf(FocusSessionState.Idle) }&#10;            val elapsedTime = remember { mutableStateOf(0) }&#10;&#10;            MainScreen(&#10;                sessionState = sessionState.value,&#10;                elapsedTime = elapsedTime.value,&#10;                onStart = {&#10;                    sessionState.value = FocusSessionState.Running&#10;                    elapsedTime.value = 0&#10;                    timerJob?.cancel()&#10;                    timerJob = CoroutineScope(Dispatchers.Main).launch {&#10;                        while (true) {&#10;                            delay(1000)&#10;                            elapsedTime.value += 1&#10;                        }&#10;                    }&#10;                },&#10;                onPause = {&#10;                    sessionState.value = FocusSessionState.Paused&#10;                    timerJob?.cancel()&#10;                },&#10;                onResume = {&#10;                    sessionState.value = FocusSessionState.Running&#10;                    timerJob = CoroutineScope(Dispatchers.Main).launch {&#10;                        while (true) {&#10;                            delay(1000)&#10;                            elapsedTime.value += 1&#10;                        }&#10;                    }&#10;                },&#10;                onStop = {&#10;                    sessionState.value = FocusSessionState.Idle&#10;                    timerJob?.cancel()&#10;                    elapsedTime.value = 0&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.focus_ai.presentation&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.core.splashscreen.SplashScreen.Companion.installSplashScreen&#10;import com.example.focus_ai.presentation.ui.AppNavigation&#10;&#10;class MainActivity : ComponentActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        installSplashScreen()&#10;        super.onCreate(savedInstanceState)&#10;&#10;        setTheme(android.R.style.Theme_DeviceDefault)&#10;&#10;        setContent {&#10;            AppNavigation()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/focus_ai/presentation/ui/AppNavigation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/focus_ai/presentation/ui/AppNavigation.kt" />
              <option name="updatedContent" value="package com.example.focus_ai.presentation.ui&#10;&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.platform.LocalContext&#10;&#10;enum class AppState {&#10;    SPLASH,&#10;    LOGIN,&#10;    MAIN&#10;}&#10;&#10;@Composable&#10;fun AppNavigation() {&#10;    var currentState by remember { mutableStateOf(AppState.SPLASH) }&#10;    &#10;    when (currentState) {&#10;        AppState.SPLASH -&gt; {&#10;            SplashScreen(&#10;                onNavigateToLogin = {&#10;                    currentState = AppState.LOGIN&#10;                }&#10;            )&#10;        }&#10;        &#10;        AppState.LOGIN -&gt; {&#10;            LoginScreen(&#10;                onNavigateToMain = {&#10;                    currentState = AppState.MAIN&#10;                }&#10;            )&#10;        }&#10;        &#10;        AppState.MAIN -&gt; {&#10;            // 기존 MainScreen 컴포넌트를 여기에 통합&#10;            MainScreenWrapper()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/focus_ai/presentation/ui/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/focus_ai/presentation/ui/LoginScreen.kt" />
              <option name="originalContent" value="package com.example.focus_ai.presentation.ui&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Email&#10;import androidx.compose.material.icons.filled.Lock&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.input.VisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun LoginScreen(&#10;    onNavigateToMain: () -&gt; Unit&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var passwordVisible by remember { mutableStateOf(false) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        Color(0xFF0F0F23),&#10;                        Color(0xFF1A1A2E),&#10;                        Color(0xFF16213E)&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            // 로고 섹션&#10;            Text(&#10;                text = &quot;Focus AI&quot;,&#10;                fontSize = 36.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Text(&#10;                text = &quot;집중력 향상을 위한 AI 파트너&quot;,&#10;                fontSize = 14.sp,&#10;                color = Color(0xFF9BA4B4),&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.padding(top = 8.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(48.dp))&#10;&#10;            // 로그인 폼&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 16.dp),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = Color(0xFF212147)&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;로그인&quot;,&#10;                        fontSize = 24.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White,&#10;                        modifier = Modifier.align(Alignment.CenterHorizontally)&#10;                    )&#10;&#10;                    // 이메일 입력 필드&#10;                    OutlinedTextField(&#10;                        value = email,&#10;                        onValueChange = { email = it },&#10;                        label = { Text(&quot;이메일&quot;, color = Color(0xFF9BA4B4)) },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                Icons.Default.Email,&#10;                                contentDescription = &quot;Email&quot;,&#10;                                tint = Color(0xFF2F80ED)&#10;                            )&#10;                        },&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = Color(0xFF2F80ED),&#10;                            unfocusedBorderColor = Color(0xFF4A4A6A),&#10;                            focusedTextColor = Color.White,&#10;                            unfocusedTextColor = Color.White,&#10;                            cursorColor = Color(0xFF2F80ED)&#10;                        ),&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    )&#10;&#10;                    // 비밀번호 입력 필드&#10;                    OutlinedTextField(&#10;                        value = password,&#10;                        onValueChange = { password = it },&#10;                        label = { Text(&quot;비밀번호&quot;, color = Color(0xFF9BA4B4)) },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                Icons.Default.Lock,&#10;                                contentDescription = &quot;Password&quot;,&#10;                                tint = Color(0xFF2F80ED)&#10;                            )&#10;                        },&#10;                        trailingIcon = {&#10;                            IconButton(&#10;                                onClick = { passwordVisible = !passwordVisible }&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = if (passwordVisible) Icons.Default.Visibility&#10;                                                 else Icons.Default.VisibilityOff,&#10;                                    contentDescription = if (passwordVisible) &quot;Hide password&quot; else &quot;Show password&quot;,&#10;                                    tint = Color(0xFF9BA4B4)&#10;                                )&#10;                            }&#10;                        },&#10;                        visualTransformation = if (passwordVisible) VisualTransformation.None&#10;                                             else PasswordVisualTransformation(),&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = Color(0xFF2F80ED),&#10;                            unfocusedBorderColor = Color(0xFF4A4A6A),&#10;                            focusedTextColor = Color.White,&#10;                            unfocusedTextColor = Color.White,&#10;                            cursorColor = Color(0xFF2F80ED)&#10;                        ),&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // 로그인 버튼&#10;                    Button(&#10;                        onClick = {&#10;                            isLoading = true&#10;                            // 임시로 2초 후 메인 화면으로 이동&#10;                            CoroutineScope(Dispatchers.Main).launch {&#10;                                delay(2000)&#10;                                isLoading = false&#10;                                onNavigateToMain()&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(52.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = Color(0xFF2F80ED)&#10;                        ),&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        enabled = email.isNotEmpty() &amp;&amp; password.isNotEmpty() &amp;&amp; !isLoading&#10;                    ) {&#10;                        if (isLoading) {&#10;                            CircularProgressIndicator(&#10;                                color = Color.White,&#10;                                modifier = Modifier.size(20.dp),&#10;                                strokeWidth = 2.dp&#10;                            )&#10;                        } else {&#10;                            Text(&#10;                                text = &quot;로그인&quot;,&#10;                                fontSize = 16.sp,&#10;                                fontWeight = FontWeight.Medium,&#10;                                color = Color.White&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // 추가 옵션들&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        TextButton(&#10;                            onClick = { /* 비밀번호 찾기 */ }&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;비밀번호를 잊으셨나요?&quot;,&#10;                                color = Color(0xFF2F80ED),&#10;                                fontSize = 14.sp&#10;                            )&#10;                        }&#10;&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;계정이 없으신가요? &quot;,&#10;                                color = Color(0xFF9BA4B4),&#10;                                fontSize = 14.sp&#10;                            )&#10;                            TextButton(&#10;                                onClick = { /* 회원가입 */ }&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;회원가입&quot;,&#10;                                    color = Color(0xFF2F80ED),&#10;                                    fontSize = 14.sp,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.focus_ai.presentation.ui&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Email&#10;import androidx.compose.material.icons.filled.Lock&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.input.VisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.wear.compose.material.*&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun LoginScreen(&#10;    onNavigateToMain: () -&gt; Unit&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var passwordVisible by remember { mutableStateOf(false) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        Color(0xFF0F0F23),&#10;                        Color(0xFF1A1A2E),&#10;                        Color(0xFF16213E)&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            // 로고 섹션&#10;            Text(&#10;                text = &quot;Focus AI&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                textAlign = TextAlign.Center&#10;            )&#10;            &#10;            Text(&#10;                text = &quot;집중력 향상 파트너&quot;,&#10;                fontSize = 12.sp,&#10;                color = Color(0xFF9BA4B4),&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.padding(top = 4.dp)&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            &#10;            // 로그인 폼&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 8.dp),&#10;                shape = RoundedCornerShape(12.dp),&#10;                backgroundColor = Color(0xFF212147)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;로그인&quot;,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White,&#10;                        modifier = Modifier.align(Alignment.CenterHorizontally)&#10;                    )&#10;                    &#10;                    // 간단한 입력 필드들 - Wear OS에 맞게 단순화&#10;                    OutlinedTextField(&#10;                        value = email,&#10;                        onValueChange = { email = it },&#10;                        label = &quot;이메일&quot;,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                    &#10;                    OutlinedTextField(&#10;                        value = password,&#10;                        onValueChange = { password = it },&#10;                        label = &quot;비밀번호&quot;,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                    &#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    &#10;                    // 로그인 버튼&#10;                    Button(&#10;                        onClick = {&#10;                            isLoading = true&#10;                            CoroutineScope(Dispatchers.Main).launch {&#10;                                delay(2000)&#10;                                isLoading = false&#10;                                onNavigateToMain()&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(40.dp),&#10;                        enabled = email.isNotEmpty() &amp;&amp; password.isNotEmpty() &amp;&amp; !isLoading,&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            backgroundColor = Color(0xFF2F80ED)&#10;                        )&#10;                    ) {&#10;                        if (isLoading) {&#10;                            CircularProgressIndicator(&#10;                                color = Color.White,&#10;                                modifier = Modifier.size(16.dp),&#10;                                strokeWidth = 2.dp&#10;                            )&#10;                        } else {&#10;                            Text(&#10;                                text = &quot;로그인&quot;,&#10;                                fontSize = 14.sp,&#10;                                fontWeight = FontWeight.Medium,&#10;                                color = Color.White&#10;                            )&#10;                        }&#10;                    }&#10;                    &#10;                    // 추가 옵션들&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Button(&#10;                            onClick = { /* 비밀번호 찾기 */ },&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                backgroundColor = Color.Transparent&#10;                            )&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;비밀번호 찾기&quot;,&#10;                                color = Color(0xFF2F80ED),&#10;                                fontSize = 12.sp&#10;                            )&#10;                        }&#10;                        &#10;                        Button(&#10;                            onClick = { /* 회원가입 */ },&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                backgroundColor = Color.Transparent&#10;                            )&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;회원가입&quot;,&#10;                                color = Color(0xFF2F80ED),&#10;                                fontSize = 12.sp,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/focus_ai/presentation/ui/MainScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/focus_ai/presentation/ui/MainScreen.kt" />
              <option name="originalContent" value="package com.example.focus_ai.presentation.ui&#10;&#10;&#10;&#10;fun MainScreen(&#10;    sessionState: FocusSessionState,&#10;    onStart: () -&gt; Unit,&#10;    onPause: () -&gt; Unit,&#10;    onResume: () -&gt; Unit,&#10;    onStop: () -&gt; Unit&#10;) {&#10;    val backgroundColor = Color(0xFF1A1A2E) // 진한 네이비&#10;    val textColor = Color.White&#10;&#10;    Surface(&#10;        modifier = Modifier.fillMaxSize(),&#10;        color = backgroundColor&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = sessionState.labelText,&#10;                fontSize = 20.sp,&#10;                color = textColor,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            when (sessionState) {&#10;                FocusSessionState.Idle -&gt; {&#10;                    FocusButton(text = &quot;▶ 집중 시작&quot;, onClick = onStart)&#10;                }&#10;                FocusSessionState.Running -&gt; {&#10;                    Row(horizontalArrangement = Arrangement.spacedBy(12.dp)) {&#10;                        FocusButton(text = &quot;⏸ 일시정지&quot;, onClick = onPause)&#10;                        FocusButton(text = &quot;⏹ 중지&quot;, onClick = onStop)&#10;                    }&#10;                }&#10;                FocusSessionState.Paused -&gt; {&#10;                    Row(horizontalArrangement = Arrangement.spacedBy(12.dp)) {&#10;                        FocusButton(text = &quot;▶ 재개&quot;, onClick = onResume)&#10;                        FocusButton(text = &quot;⏹ 중지&quot;, onClick = onStop)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.focus_ai.presentation.ui&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Pause&#10;import androidx.compose.material.icons.filled.PlayArrow&#10;import androidx.compose.material.icons.filled.Stop&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.focus_ai.presentation.model.FocusSessionState&#10;&#10;@Composable&#10;fun MainScreen(&#10;    sessionState: FocusSessionState,&#10;    elapsedTime: Int,&#10;    onStart: () -&gt; Unit,&#10;    onPause: () -&gt; Unit,&#10;    onResume: () -&gt; Unit,&#10;    onStop: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                androidx.compose.ui.graphics.Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        Color(0xFF0F0F23),&#10;                        Color(0xFF1A1A2E),&#10;                        Color(0xFF16213E)&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            // 앱 제목&#10;            Text(&#10;                text = &quot;Focus AI&quot;,&#10;                fontSize = 32.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                textAlign = TextAlign.Center&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            // 상태 텍스트&#10;            Text(&#10;                text = when(sessionState) {&#10;                    FocusSessionState.Idle -&gt; &quot;집중할 준비가 되셨나요?&quot;&#10;                    FocusSessionState.Running -&gt; &quot;집중 중...&quot;&#10;                    FocusSessionState.Paused -&gt; &quot;일시 정지됨&quot;&#10;                },&#10;                fontSize = 16.sp,&#10;                color = Color(0xFF9BA4B4),&#10;                textAlign = TextAlign.Center&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(48.dp))&#10;            &#10;            // 타이머 카드&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 16.dp),&#10;                shape = RoundedCornerShape(20.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = Color(0xFF212147)&#10;                ),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(32.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // 타이머 표시&#10;                    Text(&#10;                        text = formatTime(elapsedTime),&#10;                        fontSize = 48.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                    &#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;                    &#10;                    // 상태에 따른 버튼들&#10;                    Row(&#10;                        horizontalArrangement = Arrangement.spacedBy(16.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        when (sessionState) {&#10;                            FocusSessionState.Idle -&gt; {&#10;                                Button(&#10;                                    onClick = onStart,&#10;                                    modifier = Modifier&#10;                                        .height(56.dp)&#10;                                        .width(140.dp),&#10;                                    colors = ButtonDefaults.buttonColors(&#10;                                        containerColor = Color(0xFF2F80ED)&#10;                                    ),&#10;                                    shape = RoundedCornerShape(16.dp)&#10;                                ) {&#10;                                    Icon(&#10;                                        Icons.Default.PlayArrow,&#10;                                        contentDescription = &quot;시작&quot;,&#10;                                        modifier = Modifier.size(20.dp)&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(8.dp))&#10;                                    Text(&#10;                                        text = &quot;시작&quot;,&#10;                                        fontSize = 16.sp,&#10;                                        fontWeight = FontWeight.Medium&#10;                                    )&#10;                                }&#10;                            }&#10;                            &#10;                            FocusSessionState.Running -&gt; {&#10;                                Button(&#10;                                    onClick = onPause,&#10;                                    modifier = Modifier&#10;                                        .height(56.dp)&#10;                                        .width(120.dp),&#10;                                    colors = ButtonDefaults.buttonColors(&#10;                                        containerColor = Color(0xFFFF6B35)&#10;                                    ),&#10;                                    shape = RoundedCornerShape(16.dp)&#10;                                ) {&#10;                                    Icon(&#10;                                        Icons.Default.Pause,&#10;                                        contentDescription = &quot;일시정지&quot;,&#10;                                        modifier = Modifier.size(20.dp)&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(4.dp))&#10;                                    Text(&#10;                                        text = &quot;일시정지&quot;,&#10;                                        fontSize = 14.sp,&#10;                                        fontWeight = FontWeight.Medium&#10;                                    )&#10;                                }&#10;                                &#10;                                Button(&#10;                                    onClick = onStop,&#10;                                    modifier = Modifier&#10;                                        .height(56.dp)&#10;                                        .width(100.dp),&#10;                                    colors = ButtonDefaults.buttonColors(&#10;                                        containerColor = Color(0xFF6C757D)&#10;                                    ),&#10;                                    shape = RoundedCornerShape(16.dp)&#10;                                ) {&#10;                                    Icon(&#10;                                        Icons.Default.Stop,&#10;                                        contentDescription = &quot;정지&quot;,&#10;                                        modifier = Modifier.size(20.dp)&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(4.dp))&#10;                                    Text(&#10;                                        text = &quot;정지&quot;,&#10;                                        fontSize = 14.sp,&#10;                                        fontWeight = FontWeight.Medium&#10;                                    )&#10;                                }&#10;                            }&#10;                            &#10;                            FocusSessionState.Paused -&gt; {&#10;                                Button(&#10;                                    onClick = onResume,&#10;                                    modifier = Modifier&#10;                                        .height(56.dp)&#10;                                        .width(120.dp),&#10;                                    colors = ButtonDefaults.buttonColors(&#10;                                        containerColor = Color(0xFF28A745)&#10;                                    ),&#10;                                    shape = RoundedCornerShape(16.dp)&#10;                                ) {&#10;                                    Icon(&#10;                                        Icons.Default.PlayArrow,&#10;                                        contentDescription = &quot;재개&quot;,&#10;                                        modifier = Modifier.size(20.dp)&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(4.dp))&#10;                                    Text(&#10;                                        text = &quot;재개&quot;,&#10;                                        fontSize = 14.sp,&#10;                                        fontWeight = FontWeight.Medium&#10;                                    )&#10;                                }&#10;                                &#10;                                Button(&#10;                                    onClick = onStop,&#10;                                    modifier = Modifier&#10;                                        .height(56.dp)&#10;                                        .width(100.dp),&#10;                                    colors = ButtonDefaults.buttonColors(&#10;                                        containerColor = Color(0xFF6C757D)&#10;                                    ),&#10;                                    shape = RoundedCornerShape(16.dp)&#10;                                ) {&#10;                                    Icon(&#10;                                        Icons.Default.Stop,&#10;                                        contentDescription = &quot;정지&quot;,&#10;                                        modifier = Modifier.size(20.dp)&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(4.dp))&#10;                                    Text(&#10;                                        text = &quot;정지&quot;,&#10;                                        fontSize = 14.sp,&#10;                                        fontWeight = FontWeight.Medium&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(32.dp))&#10;            &#10;            // 집중 팁 카드&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 16.dp),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = Color(0xFF1E1E3F).copy(alpha = 0.7f)&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(20.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot; 집중 팁&quot;,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White&#10;                    )&#10;                    &#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    &#10;                    Text(&#10;                        text = when(sessionState) {&#10;                            FocusSessionState.Idle -&gt; &quot;핸드폰을 멀리 두고 집중 환경을 만드세요.&quot;&#10;                            FocusSessionState.Running -&gt; &quot;깊게 숨쉬며 현재 작업에만 집중하세요.&quot;&#10;                            FocusSessionState.Paused -&gt; &quot;잠깐 휴식을 취하고 다시 집중해보세요.&quot;&#10;                        },&#10;                        fontSize = 14.sp,&#10;                        color = Color(0xFF9BA4B4),&#10;                        lineHeight = 20.sp&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private fun formatTime(seconds: Int): String {&#10;    val hours = seconds / 3600&#10;    val minutes = (seconds % 3600) / 60&#10;    val secs = seconds % 60&#10;    &#10;    return if (hours &gt; 0) {&#10;        String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, secs)&#10;    } else {&#10;        String.format(&quot;%02d:%02d&quot;, minutes, secs)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/focus_ai/presentation/ui/MainScreenWrapper.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/focus_ai/presentation/ui/MainScreenWrapper.kt" />
              <option name="updatedContent" value="package com.example.focus_ai.presentation.ui&#10;&#10;import androidx.compose.runtime.*&#10;import com.example.focus_ai.presentation.model.FocusSessionState&#10;import kotlinx.coroutines.*&#10;&#10;@Composable&#10;fun MainScreenWrapper() {&#10;    val sessionState = remember { mutableStateOf(FocusSessionState.Idle) }&#10;    val elapsedTime = remember { mutableStateOf(0) }&#10;    var timerJob by remember { mutableStateOf&lt;Job?&gt;(null) }&#10;&#10;    MainScreen(&#10;        sessionState = sessionState.value,&#10;        elapsedTime = elapsedTime.value,&#10;        onStart = {&#10;            sessionState.value = FocusSessionState.Running&#10;            elapsedTime.value = 0&#10;            timerJob?.cancel()&#10;            timerJob = CoroutineScope(Dispatchers.Main).launch {&#10;                while (true) {&#10;                    delay(1000)&#10;                    elapsedTime.value += 1&#10;                }&#10;            }&#10;        },&#10;        onPause = {&#10;            sessionState.value = FocusSessionState.Paused&#10;            timerJob?.cancel()&#10;        },&#10;        onResume = {&#10;            sessionState.value = FocusSessionState.Running&#10;            timerJob = CoroutineScope(Dispatchers.Main).launch {&#10;                while (true) {&#10;                    delay(1000)&#10;                    elapsedTime.value += 1&#10;                }&#10;            }&#10;        },&#10;        onStop = {&#10;            sessionState.value = FocusSessionState.Idle&#10;            elapsedTime.value = 0&#10;            timerJob?.cancel()&#10;        }&#10;    )&#10;&#10;    DisposableEffect(Unit) {&#10;        onDispose {&#10;            timerJob?.cancel()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/focus_ai/presentation/ui/SplashScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/focus_ai/presentation/ui/SplashScreen.kt" />
              <option name="updatedContent" value="package com.example.focus_ai.presentation.ui&#10;&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import kotlinx.coroutines.delay&#10;&#10;@Composable&#10;fun SplashScreen(&#10;    onNavigateToLogin: () -&gt; Unit&#10;) {&#10;    val animatedAlpha by animateFloatAsState(&#10;        targetValue = 1f,&#10;        animationSpec = tween(durationMillis = 1500),&#10;        label = &quot;alpha_animation&quot;&#10;    )&#10;&#10;    LaunchedEffect(Unit) {&#10;        delay(3000) // 3초 후 로그인 화면으로 이동&#10;        onNavigateToLogin()&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                androidx.compose.ui.graphics.Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        Color(0xFF0F0F23), // 진한 네이비&#10;                        Color(0xFF1A1A2E), // 중간 네이비&#10;                        Color(0xFF16213E)  // 밝은 네이비&#10;                    )&#10;                )&#10;            ),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            // 메인 로고 텍스트&#10;            Text(&#10;                text = &quot;Focus AI&quot;,&#10;                fontSize = 48.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.alpha(animatedAlpha)&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            // 서브 텍스트&#10;            Text(&#10;                text = &quot;AI와 함께하는 집중 시간&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFF9BA4B4),&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.alpha(animatedAlpha * 0.8f)&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(32.dp))&#10;            &#10;            // 로딩 인디케이터 (점 3개)&#10;            Row(&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                repeat(3) { index -&gt;&#10;                    val animatedScale by animateFloatAsState(&#10;                        targetValue = if ((System.currentTimeMillis() / 500) % 3 == index.toLong()) 1.2f else 1f,&#10;                        animationSpec = tween(300),&#10;                        label = &quot;dot_animation_$index&quot;&#10;                    )&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(8.dp)&#10;                            .background(&#10;                                Color(0xFF2F80ED),&#10;                                shape = androidx.compose.foundation.shape.CircleShape&#10;                            )&#10;                            .alpha(animatedAlpha)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>